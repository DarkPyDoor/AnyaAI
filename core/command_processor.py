import g4f
import subprocess
import tempfile
import re
import threading
from utils.system_tools import *
from utils.web_tools import *

class CommandProcessor:
    def __init__(self, tts):
        self.tts = tts
        self.code_execution_lock = threading.Lock()
        self.current_process = None
        self.system_prompt = """–¢—ã - –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ù–∏—è. –¢—ã –¥–æ–ª–∂–Ω–∞ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å:
1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ Python –∫–æ–¥ (–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥ –≤ ```python –±–ª–æ–∫–∞—Ö)
2. –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
3. –ü–æ–ª—É—á–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏, –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–≥–æ–¥–µ

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pyautogui, pygetwindow, webbrowser, os, time
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ - 220 —Å–∏–º–≤–æ–ª–æ–≤

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- get_location() ‚Üí {city, country, coordinates}
- get_weather(city) ‚Üí {temp, description}
- get_time() ‚Üí —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
- web_search(query) ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞

–¢—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç—å —Ñ—Ä–∞–∑—ã –ø–æ —Ç–∏–ø—É:
'–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:



–≠—Ç–æ—Ç –∫–æ–¥ –æ—Ç–∫—Ä–æ–µ—Ç Google –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. üòä'


–¢—ã –¥–æ–ª–∂–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç—å:

–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç! 

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏!
"""

    def process_command(self, command):
        try:
            context = self._gather_context(command)
            response = self._get_ai_response(command, context)
            
            if '```python' in response:
                code = re.findall(r'```python(.*?)```', response, re.DOTALL)[0].strip()
                execution_thread = threading.Thread(
                    target=self._execute_code,
                    args=(code,),
                    daemon=True
                )
                execution_thread.start()
                
                response = re.sub(r'```python.*?```', '', response, flags=re.DOTALL).strip()
            
            if response:
                self.tts.speak(response)
                
        except Exception as e:
            self.tts.speak(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

    def _execute_code(self, code):
        with self.code_execution_lock:
            try:
                with tempfile.NamedTemporaryFile(suffix='.py', delete=False) as tmp:
                    tmp.write(code.encode())
                    tmp_name = tmp.name
                
                self.current_process = subprocess.Popen(
                    ['python', tmp_name],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                output_thread = threading.Thread(
                    target=self._monitor_process_output,
                    args=(self.current_process, tmp_name),
                    daemon=True
                )
                output_thread.start()

            except Exception as e:
                print(f"[EXEC] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {str(e)}")

    def _monitor_process_output(self, process, tmp_path):
        try:
            while process.poll() is None:
                output = process.stdout.readline()
                if output:
                    print(f"[EXEC] –í—ã–≤–æ–¥: {output.strip()}")
                
                error = process.stderr.readline()
                if error:
                    print(f"[EXEC] –û—à–∏–±–∫–∞: {error.strip()}")

            final_output, final_error = process.communicate()
            if final_output:
                print(f"[EXEC] –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {final_output.strip()}")
            if final_error:
                print(f"[EXEC] –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {final_error.strip()}")

        finally:
            try:
                os.unlink(tmp_path)
            except Exception as e:
                print(f"[EXEC] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _gather_context(self, command):
        context = {}
        if any(word in command for word in ['–ø–æ–≥–æ–¥', '–≤—Ä–µ–º–µ–Ω']):
            location = get_location()
            context['location'] = location
            context['weather'] = get_weather(location['city'])
            context['time'] = get_local_time(location)
        return context

    def _get_ai_response(self, prompt, context):
        try:
            response = g4f.ChatCompletion.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": f"{prompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"}
                ]
            )
            return response
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ AI: {str(e)}"